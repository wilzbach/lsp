[
  {
    "detail": "abs()",
    "documentation": {
      "kind": "markdown",
      "value": "returns the absolute value of the number"
    },
    "filterText": "ls.abs",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "abs",
    "textEdit": {
      "newText": "ls.abs($1)",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 4,
          "line": 1
        }
      }
    }
  },
  {
    "detail": "acos()",
    "documentation": {
      "kind": "markdown",
      "value": "returns the arccosine of the number"
    },
    "filterText": "ls.acos",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "acos",
    "textEdit": {
      "newText": "ls.acos($1)",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 4,
          "line": 1
        }
      }
    }
  },
  {
    "detail": "approxEqual(value:float)\napproxEqual(maxRelDiff:float value:float)\napproxEqual(maxAbsDiff:float value:float)\napproxEqual(maxAbsDiff:float maxRelDiff:float value:float)",
    "documentation": {
      "kind": "markdown",
      "value": "### approxEqual(value:float)\nreturns true if the number is approximately equal to `value`\n\n### approxEqual(maxRelDiff:float value:float)\nreturns true if the number is approximately equal to `value`, within a relative tolerance\n\n### approxEqual(maxAbsDiff:float value:float)\nreturns true if the number is approximately equal to `value`, within a absolute tolerance (abs(num - value) <= maxAbsDiff)\n\n### approxEqual(maxAbsDiff:float maxRelDiff:float value:float)\nreturns true if the number is approximately equal to `value` (within a relative and absolute threshold)"
    },
    "filterText": "ls.approxEqual",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "approxEqual",
    "textEdit": {
      "newText": "ls.approxEqual($1)",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 4,
          "line": 1
        }
      }
    }
  },
  {
    "detail": "asin()",
    "documentation": {
      "kind": "markdown",
      "value": "returns the arcsine of the number"
    },
    "filterText": "ls.asin",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "asin",
    "textEdit": {
      "newText": "ls.asin($1)",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 4,
          "line": 1
        }
      }
    }
  },
  {
    "detail": "atan()",
    "documentation": {
      "kind": "markdown",
      "value": "returns the arctangent of the number"
    },
    "filterText": "ls.atan",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "atan",
    "textEdit": {
      "newText": "ls.atan($1)",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 4,
          "line": 1
        }
      }
    }
  },
  {
    "detail": "ceil()",
    "documentation": {
      "kind": "markdown",
      "value": "returns the smallest integer not less than x"
    },
    "filterText": "ls.ceil",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "ceil",
    "textEdit": {
      "newText": "ls.ceil($1)",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 4,
          "line": 1
        }
      }
    }
  },
  {
    "detail": "cos()",
    "documentation": {
      "kind": "markdown",
      "value": "returns the cosine of the number"
    },
    "filterText": "ls.cos",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "cos",
    "textEdit": {
      "newText": "ls.cos($1)",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 4,
          "line": 1
        }
      }
    }
  },
  {
    "detail": "exp()",
    "documentation": {
      "kind": "markdown",
      "value": ""
    },
    "filterText": "ls.exp",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "exp",
    "textEdit": {
      "newText": "ls.exp($1)",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 4,
          "line": 1
        }
      }
    }
  },
  {
    "detail": "floor()",
    "documentation": {
      "kind": "markdown",
      "value": "returns the largest integer not greater than x"
    },
    "filterText": "ls.floor",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "floor",
    "textEdit": {
      "newText": "ls.floor($1)",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 4,
          "line": 1
        }
      }
    }
  },
  {
    "detail": "isInfinity()",
    "documentation": {
      "kind": "markdown",
      "value": "returns true if the number represents infinity, false otherwise"
    },
    "filterText": "ls.isInfinity",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "isInfinity",
    "textEdit": {
      "newText": "ls.isInfinity($1)",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 4,
          "line": 1
        }
      }
    }
  },
  {
    "detail": "isNaN()",
    "documentation": {
      "kind": "markdown",
      "value": "returns the absolute value of the number"
    },
    "filterText": "ls.isNaN",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "isNaN",
    "textEdit": {
      "newText": "ls.isNaN($1)",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 4,
          "line": 1
        }
      }
    }
  },
  {
    "detail": "log()",
    "documentation": {
      "kind": "markdown",
      "value": "returns the logarithmic of the number"
    },
    "filterText": "ls.log",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "log",
    "textEdit": {
      "newText": "ls.log($1)",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 4,
          "line": 1
        }
      }
    }
  },
  {
    "detail": "log10()",
    "documentation": {
      "kind": "markdown",
      "value": "returns the base 10 logarithm of the number"
    },
    "filterText": "ls.log10",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "log10",
    "textEdit": {
      "newText": "ls.log10($1)",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 4,
          "line": 1
        }
      }
    }
  },
  {
    "detail": "log2()",
    "documentation": {
      "kind": "markdown",
      "value": "returns the base 2 logarithm of the number"
    },
    "filterText": "ls.log2",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "log2",
    "textEdit": {
      "newText": "ls.log2($1)",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 4,
          "line": 1
        }
      }
    }
  },
  {
    "detail": "round()",
    "documentation": {
      "kind": "markdown",
      "value": "returns the nearest integer to the given number"
    },
    "filterText": "ls.round",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "round",
    "textEdit": {
      "newText": "ls.round($1)",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 4,
          "line": 1
        }
      }
    }
  },
  {
    "detail": "sin()",
    "documentation": {
      "kind": "markdown",
      "value": "returns the sine of the number"
    },
    "filterText": "ls.sin",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "sin",
    "textEdit": {
      "newText": "ls.sin($1)",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 4,
          "line": 1
        }
      }
    }
  },
  {
    "detail": "sqrt()",
    "documentation": {
      "kind": "markdown",
      "value": "returns the square root of the number"
    },
    "filterText": "ls.sqrt",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "sqrt",
    "textEdit": {
      "newText": "ls.sqrt($1)",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 4,
          "line": 1
        }
      }
    }
  },
  {
    "detail": "tan()",
    "documentation": {
      "kind": "markdown",
      "value": "returns the tangent of the number"
    },
    "filterText": "ls.tan",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "tan",
    "textEdit": {
      "newText": "ls.tan($1)",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 4,
          "line": 1
        }
      }
    }
  }
]
