[
  {
    "detail": "capitalize()",
    "documentation": {
      "kind": "markdown",
      "value": "returns a string where the first letter of each word is capitalized"
    },
    "filterText": "m[\"f\"].capitalize",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "capitalize",
    "sortText": "20-capitalize",
    "textEdit": {
      "newText": "m[\"f\"].capitalize()",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 0,
          "line": 1
        }
      }
    }
  },
  {
    "detail": "contains(pattern:regexp)\ncontains(item:string)",
    "documentation": {
      "kind": "markdown",
      "value": "### contains(pattern:regexp)\nreturns true if the string matches the `pattern`, false otherwise\n\n### contains(item:string)\nreturns true if the string contains the sequence `item`, false otherwise"
    },
    "filterText": "m[\"f\"].contains",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "contains",
    "sortText": "20-contains",
    "textEdit": {
      "newText": "m[\"f\"].contains(pattern:${1:<regexp>})",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 0,
          "line": 1
        }
      }
    }
  },
  {
    "detail": "endswith(suffix:string)",
    "documentation": {
      "kind": "markdown",
      "value": "returns true if the string ends with the `suffix`"
    },
    "filterText": "m[\"f\"].endswith",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "endswith",
    "sortText": "20-endswith",
    "textEdit": {
      "newText": "m[\"f\"].endswith(suffix:\"${1:<string>}\")",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 0,
          "line": 1
        }
      }
    }
  },
  {
    "detail": "length()",
    "documentation": {
      "kind": "markdown",
      "value": "returns the number of UTF-8 characters"
    },
    "filterText": "m[\"f\"].length",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "length",
    "sortText": "20-length",
    "textEdit": {
      "newText": "m[\"f\"].length()",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 0,
          "line": 1
        }
      }
    }
  },
  {
    "detail": "lowercase()",
    "documentation": {
      "kind": "markdown",
      "value": "returns a string where all characters are lower-cased"
    },
    "filterText": "m[\"f\"].lowercase",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "lowercase",
    "sortText": "20-lowercase",
    "textEdit": {
      "newText": "m[\"f\"].lowercase()",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 0,
          "line": 1
        }
      }
    }
  },
  {
    "detail": "replace(by:string item:string)\nreplace(by:string pattern:regexp)",
    "documentation": {
      "kind": "markdown",
      "value": "### replace(by:string item:string)\nreturns a string by replacing `item` with `by`\n\n### replace(by:string pattern:regexp)\nreplace all occurrences of the `pattern` RegExp /ab/ with `by`"
    },
    "filterText": "m[\"f\"].replace",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "replace",
    "sortText": "20-replace",
    "textEdit": {
      "newText": "m[\"f\"].replace(item:\"${1:<string>}\" by:\"${2:<string>}\")",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 0,
          "line": 1
        }
      }
    }
  },
  {
    "detail": "split(by:string)",
    "documentation": {
      "kind": "markdown",
      "value": "returns a list by splitting the string with the delimiter"
    },
    "filterText": "m[\"f\"].split",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "split",
    "sortText": "20-split",
    "textEdit": {
      "newText": "m[\"f\"].split(by:\"${1:<string>}\")",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 0,
          "line": 1
        }
      }
    }
  },
  {
    "detail": "startswith(prefix:string)",
    "documentation": {
      "kind": "markdown",
      "value": "returns true if the string starts with `prefix`"
    },
    "filterText": "m[\"f\"].startswith",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "startswith",
    "sortText": "20-startswith",
    "textEdit": {
      "newText": "m[\"f\"].startswith(prefix:\"${1:<string>}\")",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 0,
          "line": 1
        }
      }
    }
  },
  {
    "detail": "substring(start:int)\nsubstring(end:int start:int)\nsubstring(end:int)",
    "documentation": {
      "kind": "markdown",
      "value": "### substring(start:int)\nreturns characters after the specified index\n\n### substring(end:int start:int)\nreturns characters after the start index and until the end index\n\n### substring(end:int)\nreturns characters until the specified index"
    },
    "filterText": "m[\"f\"].substring",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "substring",
    "sortText": "20-substring",
    "textEdit": {
      "newText": "m[\"f\"].substring(start:${1:<int>})",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 0,
          "line": 1
        }
      }
    }
  },
  {
    "detail": "trim()",
    "documentation": {
      "kind": "markdown",
      "value": "returns a string with any leading and trailing whitespace (including tabs) removed"
    },
    "filterText": "m[\"f\"].trim",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "trim",
    "sortText": "20-trim",
    "textEdit": {
      "newText": "m[\"f\"].trim()",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 0,
          "line": 1
        }
      }
    }
  },
  {
    "detail": "uppercase()",
    "documentation": {
      "kind": "markdown",
      "value": "returns a string where all characters are upper-cased"
    },
    "filterText": "m[\"f\"].uppercase",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "uppercase",
    "sortText": "20-uppercase",
    "textEdit": {
      "newText": "m[\"f\"].uppercase()",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 0,
          "line": 1
        }
      }
    }
  }
]
