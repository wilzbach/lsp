[
  {
    "detail": "capitalize()",
    "documentation": {
      "kind": "markdown",
      "value": "returns a string where the first letter of each word is capitalized"
    },
    "filterText": "m[\"f\"].capitalize",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "capitalize",
    "textEdit": {
      "newText": "m[\"f\"].capitalize($1)",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 0,
          "line": 1
        }
      }
    }
  },
  {
    "detail": "contains(pattern:regexp)\ncontains(item:string)",
    "documentation": {
      "kind": "markdown",
      "value": "### contains(pattern:regexp)\nreturns true if the string matches the `pattern`, false otherwise\n\n### contains(item:string)\nreturns true if the string contains the sequence `item`, false otherwise"
    },
    "filterText": "m[\"f\"].contains",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "contains",
    "textEdit": {
      "newText": "m[\"f\"].contains($1)",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 0,
          "line": 1
        }
      }
    }
  },
  {
    "detail": "endswith(suffix:string)",
    "documentation": {
      "kind": "markdown",
      "value": "returns true if the string ends with the `suffix`"
    },
    "filterText": "m[\"f\"].endswith",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "endswith",
    "textEdit": {
      "newText": "m[\"f\"].endswith($1)",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 0,
          "line": 1
        }
      }
    }
  },
  {
    "detail": "length()",
    "documentation": {
      "kind": "markdown",
      "value": "returns the number of UTF-8 characters"
    },
    "filterText": "m[\"f\"].length",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "length",
    "textEdit": {
      "newText": "m[\"f\"].length($1)",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 0,
          "line": 1
        }
      }
    }
  },
  {
    "detail": "lowercase()",
    "documentation": {
      "kind": "markdown",
      "value": "returns a string where all characters are lower-cased"
    },
    "filterText": "m[\"f\"].lowercase",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "lowercase",
    "textEdit": {
      "newText": "m[\"f\"].lowercase($1)",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 0,
          "line": 1
        }
      }
    }
  },
  {
    "detail": "replace(by:string item:string)\nreplace(by:string pattern:regexp)",
    "documentation": {
      "kind": "markdown",
      "value": "### replace(by:string item:string)\nreturns a string by replacing `item` with `by`\n\n### replace(by:string pattern:regexp)\nreplace all occurrences of the `pattern` RegExp /ab/ with `by`"
    },
    "filterText": "m[\"f\"].replace",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "replace",
    "textEdit": {
      "newText": "m[\"f\"].replace($1)",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 0,
          "line": 1
        }
      }
    }
  },
  {
    "detail": "split(by:string)",
    "documentation": {
      "kind": "markdown",
      "value": "returns a list by splitting the string with the delimiter"
    },
    "filterText": "m[\"f\"].split",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "split",
    "textEdit": {
      "newText": "m[\"f\"].split($1)",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 0,
          "line": 1
        }
      }
    }
  },
  {
    "detail": "startswith(prefix:string)",
    "documentation": {
      "kind": "markdown",
      "value": "returns true if the string starts with `prefix`"
    },
    "filterText": "m[\"f\"].startswith",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "startswith",
    "textEdit": {
      "newText": "m[\"f\"].startswith($1)",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 0,
          "line": 1
        }
      }
    }
  },
  {
    "detail": "substring(start:int)\nsubstring(end:int start:int)\nsubstring(end:int)",
    "documentation": {
      "kind": "markdown",
      "value": "### substring(start:int)\nreturns characters after the specified index\n\n### substring(end:int start:int)\nreturns characters after the start index and until the end index\n\n### substring(end:int)\nreturns characters until the specified index"
    },
    "filterText": "m[\"f\"].substring",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "substring",
    "textEdit": {
      "newText": "m[\"f\"].substring($1)",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 0,
          "line": 1
        }
      }
    }
  },
  {
    "detail": "trim()",
    "documentation": {
      "kind": "markdown",
      "value": "returns a string with any leading and trailing whitespace (including tabs) removed"
    },
    "filterText": "m[\"f\"].trim",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "trim",
    "textEdit": {
      "newText": "m[\"f\"].trim($1)",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 0,
          "line": 1
        }
      }
    }
  },
  {
    "detail": "uppercase()",
    "documentation": {
      "kind": "markdown",
      "value": "returns a string where all characters are upper-cased"
    },
    "filterText": "m[\"f\"].uppercase",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "uppercase",
    "textEdit": {
      "newText": "m[\"f\"].uppercase($1)",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 0,
          "line": 1
        }
      }
    }
  }
]
