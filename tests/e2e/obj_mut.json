[
  {
    "detail": "contains(key:any)\ncontains(value:any)",
    "documentation": {
      "kind": "markdown",
      "value": "### contains(key:any)\nreturns true if `key` exists in the map, false otherwise\n\n### contains(value:any)\nreturns true if the `value` exists in the map, false otherwise"
    },
    "filterText": "req.body.contains",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "contains",
    "sortText": "20-contains",
    "textEdit": {
      "newText": "req.body.contains(key:${1:<any>})",
      "range": {
        "end": {
          "character": 17,
          "line": 2
        },
        "start": {
          "character": 8,
          "line": 2
        }
      }
    }
  },
  {
    "detail": "flatten()",
    "documentation": {
      "kind": "markdown",
      "value": "returns a list of key/value pairs"
    },
    "filterText": "req.body.flatten",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "flatten",
    "sortText": "20-flatten",
    "textEdit": {
      "newText": "req.body.flatten()",
      "range": {
        "end": {
          "character": 17,
          "line": 2
        },
        "start": {
          "character": 8,
          "line": 2
        }
      }
    }
  },
  {
    "detail": "get(default:any key:any)",
    "documentation": {
      "kind": "markdown",
      "value": "returns the value for the `key`, or a `default` value if it doesn't exist"
    },
    "filterText": "req.body.get",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "get",
    "sortText": "20-get",
    "textEdit": {
      "newText": "req.body.get(key:${1:<any>} default:${2:<any>})",
      "range": {
        "end": {
          "character": 17,
          "line": 2
        },
        "start": {
          "character": 8,
          "line": 2
        }
      }
    }
  },
  {
    "detail": "keys()",
    "documentation": {
      "kind": "markdown",
      "value": "returns a list of all keys"
    },
    "filterText": "req.body.keys",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "keys",
    "sortText": "20-keys",
    "textEdit": {
      "newText": "req.body.keys()",
      "range": {
        "end": {
          "character": 17,
          "line": 2
        },
        "start": {
          "character": 8,
          "line": 2
        }
      }
    }
  },
  {
    "detail": "length()",
    "documentation": {
      "kind": "markdown",
      "value": "returns the number of elements in the map"
    },
    "filterText": "req.body.length",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "length",
    "sortText": "20-length",
    "textEdit": {
      "newText": "req.body.length()",
      "range": {
        "end": {
          "character": 17,
          "line": 2
        },
        "start": {
          "character": 8,
          "line": 2
        }
      }
    }
  },
  {
    "detail": "remove(key:any)",
    "documentation": {
      "kind": "markdown",
      "value": "returns a map without `key` in it"
    },
    "filterText": "req.body.remove",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "remove",
    "sortText": "20-remove",
    "textEdit": {
      "newText": "req.body.remove(key:${1:<any>})",
      "range": {
        "end": {
          "character": 17,
          "line": 2
        },
        "start": {
          "character": 8,
          "line": 2
        }
      }
    }
  },
  {
    "detail": "values()",
    "documentation": {
      "kind": "markdown",
      "value": "returns a list of all values"
    },
    "filterText": "req.body.values",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "values",
    "sortText": "20-values",
    "textEdit": {
      "newText": "req.body.values()",
      "range": {
        "end": {
          "character": 17,
          "line": 2
        },
        "start": {
          "character": 8,
          "line": 2
        }
      }
    }
  }
]
