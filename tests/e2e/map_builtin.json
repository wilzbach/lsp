[
  {
    "detail": "contains(key:string)\ncontains(value:string)",
    "documentation": {
      "kind": "markdown",
      "value": "### contains(key:string)\nreturns true if `key` exists in the map, false otherwise\n\n### contains(value:string)\nreturns true if the `value` exists in the map, false otherwise"
    },
    "filterText": "ls.contains",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "contains",
    "textEdit": {
      "newText": "ls.contains($1)",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 4,
          "line": 1
        }
      }
    }
  },
  {
    "detail": "flatten()",
    "documentation": {
      "kind": "markdown",
      "value": "returns a list of key/value pairs"
    },
    "filterText": "ls.flatten",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "flatten",
    "textEdit": {
      "newText": "ls.flatten($1)",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 4,
          "line": 1
        }
      }
    }
  },
  {
    "detail": "get(default:string key:string)",
    "documentation": {
      "kind": "markdown",
      "value": "returns the value for the `key`, or a `default` value if it doesn't exist"
    },
    "filterText": "ls.get",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "get",
    "textEdit": {
      "newText": "ls.get($1)",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 4,
          "line": 1
        }
      }
    }
  },
  {
    "detail": "keys()",
    "documentation": {
      "kind": "markdown",
      "value": "returns a list of all keys"
    },
    "filterText": "ls.keys",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "keys",
    "textEdit": {
      "newText": "ls.keys($1)",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 4,
          "line": 1
        }
      }
    }
  },
  {
    "detail": "length()",
    "documentation": {
      "kind": "markdown",
      "value": "returns the number of elements in the map"
    },
    "filterText": "ls.length",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "length",
    "textEdit": {
      "newText": "ls.length($1)",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 4,
          "line": 1
        }
      }
    }
  },
  {
    "detail": "remove(key:string)",
    "documentation": {
      "kind": "markdown",
      "value": "returns a map without `key` in it"
    },
    "filterText": "ls.remove",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "remove",
    "textEdit": {
      "newText": "ls.remove($1)",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 4,
          "line": 1
        }
      }
    }
  },
  {
    "detail": "values()",
    "documentation": {
      "kind": "markdown",
      "value": "returns a list of all values"
    },
    "filterText": "ls.values",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "values",
    "textEdit": {
      "newText": "ls.values($1)",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 4,
          "line": 1
        }
      }
    }
  }
]
