#!/usr/bin/env python
# -*- coding: utf-8 -*-

import argparse
from collections import namedtuple
import io
import json
import multiprocessing as mp
from os import path
import sys

from bom_open import bom_open

root_dir = path.dirname(path.dirname(path.dirname(path.realpath(__file__))))
sys.path.insert(0, root_dir)


from sls import App  # noqa: E402

from tests.e2e.utils.features import parse_options  # noqa: E402
from tests.e2e.utils.fixtures import find_test_files, hub  # noqa: E402


Result = namedtuple("Result", ["updated"])


def parse_args():
    parser = argparse.ArgumentParser(description="E2E update tool")
    parser.add_argument(
        "stories",
        metavar="story",
        type=str,
        nargs="*",
        help="stories to updates",
    )
    parser.add_argument(
        "-a", "--all", dest="all", action="store_true", help="Update all tests"
    )
    parser.add_argument(
        "-s",
        "--single",
        dest="single",
        action="store_true",
        help="Run with a single thread",
    )
    return parser.parse_args()


class StoryRunner:
    def __init__(self, story_path):
        self.story_path = path.join(root_dir, story_path)
        self.story_path_raw = path.splitext(story_path)[0]
        self.updated = False
        self.app = App(hub=hub)

    def run(self):
        with bom_open(self.story_path, "r") as f:
            source = f.read()
        options = parse_options(source)
        action = options.pop("action", "complete")
        if action == "complete":
            result = self.app.complete(
                uri=self.story_path, text=source, **options
            )
        else:
            assert action == "click"
            result = self.app.click(
                uri=self.story_path, text=source, **options
            )
        self.update(result)
        return Result(updated=self.updated)

    def update(self, result):
        json_file = self.story_path_raw + ".json"
        text = json.dumps(result, indent=2, sort_keys=True)
        self.check_update(json_file, text)

    def check_update(self, update_path, text):
        source = ""
        if path.isfile(update_path):
            with io.open(update_path, "r") as f:
                source = f.read()

        if source.strip() != text.strip():
            self.updated = True
            with open(update_path, "w") as w:
                w.write(text)
                w.write("\n")


def run(story_path):
    try:
        result = StoryRunner(story_path).run()
    except BaseException as e:
        print("ERROR for: ", story_path)
        raise e
    return story_path, result


def main():
    args = parse_args()
    if args.all:
        stories = find_test_files()
    else:
        if len(args.stories) == 0:
            print("A story argument is required")
            sys.exit(1)
        stories = args.stories
    plural = "ies" if len(stories) != 1 else "y"
    print(f"Updating {len(stories)} stor{plural}")
    if args.single:
        for story in stories:
            print(story)
            run(story)
    else:
        with mp.Pool() as pool:
            results = pool.map(run, stories, 1)

    for story, result in results:
        if result.updated:
            print(f"{path.relpath(story)}: OK")


if __name__ == "__main__":
    main()
