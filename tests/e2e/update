#!/bin/bash
################################################################################
# Small e2e update tool
# This script can be used to automatically create or update the output file
# of an e2e story test.
# Required tools: 'parallel' (for 'all')
################################################################################

set -uo pipefail

function usage() {
cat <<EOF
./update <story-file|all>

<file>:  updates or creates the e2e output of a story
all:     updates all stories in parallel

Usage examples
--------------

> ./update all
(updates all story outputs in parallel)

> ./update uuid_commands.story
(creates or updates 'function_call_nested.json')

> ./update twitter_actions.story
(creates or updates 'function_call_no_inline_expression.error')
EOF
}

function error() {
	echo "${1:-}" >&2
}

function relpath() {
    realpath --relative-to "$PWD" "$1"
}

if [ "${1:-x}" == "x" ] ; then
	error "ERROR: No input file specified."
	error
	usage
	exit 1
fi

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

# shortcut for running in parallel
if [ "$1" == "all" ] || [ "$1" == "a" ] ; then
	if ! command -v parallel > /dev/null 2>&1 ; then
		error "ERROR: 'parallel' is not installed, but required for 'all'."
		exit 1
	fi
	stories="$(find "$SCRIPT_DIR" -name "*.story")"
	echo "INFO: Updating $(echo "$stories" | wc -l) stories"
	echo "$stories" | parallel -j20 "${BASH_SOURCE[0]}"
	exit 0
fi

file="$1"

if [ ! -e "${file}" ] ; then
    # check for paths from the e2e tool
    if [ -e "${SCRIPT_DIR}/${file}" ] ; then
        file="${SCRIPT_DIR}/${file}"
    else
	    error "ERROR: Input file '${file}' does not exist."
	    error
	    usage
	    exit 1
    fi
fi

file="$(realpath "$file")"
file="${file%.story}"
story="${file}.story"
output_json="${file}.json"
output_error="${file}.error"

error_file="$(mktemp)"
function finish {
  rm -f "$error_file"
}
trap finish EXIT

output="$(cd "$SCRIPT_DIR/../.." && ./sls.fixed complete "${story}" 2>"$error_file")"
exit_code=$?

# depending on whether the compiler failed, we want to write the
# json output (success) or the error message (failed).
if [ $exit_code -eq 0 ] ; then
    echo "> $(relpath "$output_json")"
    echo "$output" > "${output_json}"
else
    echo "ERROR: $story"
    echo "---"
    cat "$error_file"
    echo "---"
    echo "$output"
    echo "---"
    exit 1
fi
