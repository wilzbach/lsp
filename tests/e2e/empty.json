[
  {
    "detail": "Slack bot microservice",
    "documentation": {
      "kind": "markdown",
      "value": "# _Slack_ OMG Microservice\n\n[![Open Microservice Guide](https://img.shields.io/badge/OMG%20Enabled-\ud83d\udc4d-green.svg?)](https://microservice.guide)\n\nThis microservice's goal is to fully utilise the Slack API.\n\n## Direct usage in [Storyscript](https://storyscript.io/):\n\n##### Send\n```coffee\n>>> slack send text:'messageText' channel:'channelName' attachments:'attachmentsList' token:'token'\n```\n##### Responds\n```coffee\n>>> slack responds pattern:'pattern'\n```\n##### Users\n```coffee\n>>> slack users token:'token' limit:'limit' cursor:'cursor'\n```\n##### Channels\n```coffee\n>>> slack channels token:'token' limit:'limit' types:'listOfTypes'\n```\n##### Direct Channels\n```coffee\n>>> slack directChannels token:'token' limit:'limit'\n```\n\nCurious to [learn more](https://docs.storyscript.io/)?\n\n\u2728\ud83c\udf70\u2728\n\n## Usage with [OMG CLI](https://www.npmjs.com/package/omg)\n\n##### Send\n```shell\n$ omg run send -a text=<MESSAGE_TEXT> -a channel=<ID/NAME> -a attachments=<ATTACHMENT_LIST> -a token=<TOKEN> -e BOT_TOKEN=<BOT_TOKEN>\n```\n##### Responds\n```shell\n$ omg run responds -a pattern=<PATTERN> -e BOT_TOKEN=<BOT_TOKEN>\n```\n##### Users\n```shell\n$ omg run users -a token=<TOKEN> -a limit=<LIMIT> -a cursor=<CURSOR> -e BOT_TOKEN=<BOT_TOKEN>\n```\n##### Channels\n```shell\n$ omg run channels -a token=<TOKEN> -a limit=<LIMIT> -a types=<LIST_OF_TYPES> -e BOT_TOKEN=<BOT_TOKEN>\n```\n##### Direct Channels\n```shell\n$ omg run directChannels -a token=<TOKEN> -a limit=<LIMIT> -e BOT_TOKEN=<BOT_TOKEN>\n```\n##### Bot\n```shell\n$ omg subscribe bot hears -a pattern=<PATTERN> -a channel=<ID/NAME> -e BOT_TOKEN=<BOT_TOKEN>\n```\n\n**Note**: The OMG CLI requires [Docker](https://docs.docker.com/install/) to be installed.\n\n## License\n[MIT License](https://github.com/omg-services/slack/blob/master/LICENSE).\n\n\n<!-- ## [Asyncy](https://asyncy.com) Example\n\nThe `slack` service is published in the [Asyncy Hub](https://hub.asyncy.com/service/slack)\n\n```storyscript\nslack bot as client\n    when client hears channel:'general' pattern:/^welcome/ as msg\n        msg emoji key:'thumbs_up'\n        msg reply message:'Nice to have you here'\n\n    when client responds pattern:/foo/ as msg\n        # respond to direct messages\n        msg reply message:'bar'\n\n    when client slash pattern:/deploy/ as msg\n        # when user does /deploy do something awesome\n\n# send a post\nslack send text:'Hello world!' to:'general'\n``` -->\n"
    },
    "insertTextFormat": 1,
    "kind": 2,
    "label": "slack",
    "textEdit": {
      "newText": "slack ",
      "range": {
        "end": {
          "character": 0,
          "line": 0
        },
        "start": {
          "character": 0,
          "line": 0
        }
      }
    }
  },
  {
    "detail": "Slack bot microservice",
    "documentation": {
      "kind": "markdown",
      "value": "# _Slack_ OMG Microservice\n\n[![Open Microservice Guide](https://img.shields.io/badge/OMG%20Enabled-\ud83d\udc4d-green.svg?)](https://microservice.guide)\n\nThis microservice's goal is to fully utilise the Slack API.\n\n## Direct usage in [Storyscript](https://storyscript.io/):\n\n##### Send\n```coffee\n>>> slack send text:'messageText' channel:'channelName' attachments:'attachmentsList' token:'token'\n```\n##### Responds\n```coffee\n>>> slack responds pattern:'pattern'\n```\n##### Users\n```coffee\n>>> slack users token:'token' limit:'limit' cursor:'cursor'\n```\n##### Channels\n```coffee\n>>> slack channels token:'token' limit:'limit' types:'listOfTypes'\n```\n##### Direct Channels\n```coffee\n>>> slack directChannels token:'token' limit:'limit'\n```\n\nCurious to [learn more](https://docs.storyscript.io/)?\n\n\u2728\ud83c\udf70\u2728\n\n## Usage with [OMG CLI](https://www.npmjs.com/package/omg)\n\n##### Send\n```shell\n$ omg run send -a text=<MESSAGE_TEXT> -a channel=<ID/NAME> -a attachments=<ATTACHMENT_LIST> -a token=<TOKEN> -e BOT_TOKEN=<BOT_TOKEN>\n```\n##### Responds\n```shell\n$ omg run responds -a pattern=<PATTERN> -e BOT_TOKEN=<BOT_TOKEN>\n```\n##### Users\n```shell\n$ omg run users -a token=<TOKEN> -a limit=<LIMIT> -a cursor=<CURSOR> -e BOT_TOKEN=<BOT_TOKEN>\n```\n##### Channels\n```shell\n$ omg run channels -a token=<TOKEN> -a limit=<LIMIT> -a types=<LIST_OF_TYPES> -e BOT_TOKEN=<BOT_TOKEN>\n```\n##### Direct Channels\n```shell\n$ omg run directChannels -a token=<TOKEN> -a limit=<LIMIT> -e BOT_TOKEN=<BOT_TOKEN>\n```\n##### Bot\n```shell\n$ omg subscribe bot hears -a pattern=<PATTERN> -a channel=<ID/NAME> -e BOT_TOKEN=<BOT_TOKEN>\n```\n\n**Note**: The OMG CLI requires [Docker](https://docs.docker.com/install/) to be installed.\n\n## License\n[MIT License](https://github.com/omg-services/slack/blob/master/LICENSE).\n\n\n<!-- ## [Asyncy](https://asyncy.com) Example\n\nThe `slack` service is published in the [Asyncy Hub](https://hub.asyncy.com/service/slack)\n\n```storyscript\nslack bot as client\n    when client hears channel:'general' pattern:/^welcome/ as msg\n        msg emoji key:'thumbs_up'\n        msg reply message:'Nice to have you here'\n\n    when client responds pattern:/foo/ as msg\n        # respond to direct messages\n        msg reply message:'bar'\n\n    when client slash pattern:/deploy/ as msg\n        # when user does /deploy do something awesome\n\n# send a post\nslack send text:'Hello world!' to:'general'\n``` -->\n"
    },
    "insertTextFormat": 1,
    "kind": 2,
    "label": "slack",
    "textEdit": {
      "newText": "slack ",
      "range": {
        "end": {
          "character": 0,
          "line": 0
        },
        "start": {
          "character": 0,
          "line": 0
        }
      }
    }
  },
  {
    "detail": "The Asyncy API gateway server for executing Stories via HTTP.",
    "documentation": {
      "kind": "markdown",
      "value": "# Asyncy HTTP Gateway\n\nAPI gateway server for executing Stories via HTTP.\n\n```coffee\nhttp server as server\n  when server listen method:'get' path:'/' as r\n    log info msg:r.body\n    log info msg:r.headers\n    log info msg:r.headers['Host']\n    r write data:'Hello World'\n    r status code:200\n    r finish\n```\n\n```sh\n$ curl https://foobar.storyscriptapp.com/\nHello World\n```\n\n\n## Development\n\nSetup virtual environment and install dependencies\n```\nvirtualenv -p python3.6 venv\nsource venv/bin/activate\npip install -r requirements.txt\n```\n\nYou may need to tell pycurl the path to your openssl installation\n```\npip install --install-option=\"--with-openssl\" --install-option=\"--openssl-dir=/usr/local/opt/openssl\" pycurl\n```\nSee https://github.com/nahamsec/JSParser/issues/22\n\n\nRun locally by calling\n\n```\npython -m app.main --logging=debug --debug\n```\n\n### Register an endpoint\n\n```shell\ncurl --data '{\"endpoint\": \"http://localhost:9000/story/foo\", \"data\":{\"path\":\"/ping\", \"method\": \"post\", \"host\": \"a\"}}' \\\n     -H \"Content-Type: application/json\" \\\n     localhost:8889/register\n```\n\nNow access that endpoint\n\n```shell\ncurl -X POST -d 'foobar' -H \"Host: a.storyscriptapp.com\" http://localhost:8888/ping\n```\n\n\n### Unregister an endpoint\n\n```shell\ncurl --data '{\"endpoint\": \"http://localhost:9000/story/foo\", \"data\":{\"path\":\"/ping\", \"method\": \"post\", \"host\": \"a\"}}' \\\n     -H \"Content-Type: application/json\" \\\n     localhost:8889/unregister\n```\n"
    },
    "insertTextFormat": 1,
    "kind": 2,
    "label": "http",
    "textEdit": {
      "newText": "http ",
      "range": {
        "end": {
          "character": 0,
          "line": 0
        },
        "start": {
          "character": 0,
          "line": 0
        }
      }
    }
  },
  {
    "detail": "The Asyncy API gateway server for executing Stories via HTTP.",
    "documentation": {
      "kind": "markdown",
      "value": "# Asyncy HTTP Gateway\n\nAPI gateway server for executing Stories via HTTP.\n\n```coffee\nhttp server as server\n  when server listen method:'get' path:'/' as r\n    log info msg:r.body\n    log info msg:r.headers\n    log info msg:r.headers['Host']\n    r write data:'Hello World'\n    r status code:200\n    r finish\n```\n\n```sh\n$ curl https://foobar.storyscriptapp.com/\nHello World\n```\n\n\n## Development\n\nSetup virtual environment and install dependencies\n```\nvirtualenv -p python3.6 venv\nsource venv/bin/activate\npip install -r requirements.txt\n```\n\nYou may need to tell pycurl the path to your openssl installation\n```\npip install --install-option=\"--with-openssl\" --install-option=\"--openssl-dir=/usr/local/opt/openssl\" pycurl\n```\nSee https://github.com/nahamsec/JSParser/issues/22\n\n\nRun locally by calling\n\n```\npython -m app.main --logging=debug --debug\n```\n\n### Register an endpoint\n\n```shell\ncurl --data '{\"endpoint\": \"http://localhost:9000/story/foo\", \"data\":{\"path\":\"/ping\", \"method\": \"post\", \"host\": \"a\"}}' \\\n     -H \"Content-Type: application/json\" \\\n     localhost:8889/register\n```\n\nNow access that endpoint\n\n```shell\ncurl -X POST -d 'foobar' -H \"Host: a.storyscriptapp.com\" http://localhost:8888/ping\n```\n\n\n### Unregister an endpoint\n\n```shell\ncurl --data '{\"endpoint\": \"http://localhost:9000/story/foo\", \"data\":{\"path\":\"/ping\", \"method\": \"post\", \"host\": \"a\"}}' \\\n     -H \"Content-Type: application/json\" \\\n     localhost:8889/unregister\n```\n"
    },
    "insertTextFormat": 1,
    "kind": 2,
    "label": "http",
    "textEdit": {
      "newText": "http ",
      "range": {
        "end": {
          "character": 0,
          "line": 0
        },
        "start": {
          "character": 0,
          "line": 0
        }
      }
    }
  },
  {
    "detail": "Crontab in Asyncy",
    "documentation": {
      "kind": "markdown",
      "value": ""
    },
    "insertTextFormat": 1,
    "kind": 2,
    "label": "crontab",
    "textEdit": {
      "newText": "crontab ",
      "range": {
        "end": {
          "character": 0,
          "line": 0
        },
        "start": {
          "character": 0,
          "line": 0
        }
      }
    }
  },
  {
    "detail": "Crontab in Asyncy",
    "documentation": {
      "kind": "markdown",
      "value": ""
    },
    "insertTextFormat": 1,
    "kind": 2,
    "label": "crontab",
    "textEdit": {
      "newText": "crontab ",
      "range": {
        "end": {
          "character": 0,
          "line": 0
        },
        "start": {
          "character": 0,
          "line": 0
        }
      }
    }
  },
  {
    "detail": "UUID generator",
    "documentation": {
      "kind": "markdown",
      "value": "# _UUID_ OMG Microservice\n\n[![Open Microservice Guide](https://img.shields.io/badge/OMG%20Enabled-\ud83d\udc4d-green.svg?)](https://microservice.guide)\n\nAn OMG service to generate a UUID v4.\n\n## Direct usage in [Storyscript](https://storyscript.io/):\n\n##### Generate \n```coffee\nuuid generate\n#result 38788d28-6526-45c5-acf9-bb179160c7d7\n```\n\nCurious to [learn more](https://docs.storyscript.io/)?\n\n\u2728\ud83c\udf70\u2728\n\n## Usage with [OMG CLI](https://www.npmjs.com/package/omg)\n\n##### Generate\n```shell\n$ omg run generate\n```\n\n**Note**: The OMG CLI requires [Docker](https://docs.docker.com/install/) to be installed.\n\n## License\n[MIT License](https://github.com/omg-services/uuid/blob/master/LICENSE).\n"
    },
    "insertTextFormat": 1,
    "kind": 2,
    "label": "uuid",
    "textEdit": {
      "newText": "uuid ",
      "range": {
        "end": {
          "character": 0,
          "line": 0
        },
        "start": {
          "character": 0,
          "line": 0
        }
      }
    }
  },
  {
    "detail": "UUID generator",
    "documentation": {
      "kind": "markdown",
      "value": "# _UUID_ OMG Microservice\n\n[![Open Microservice Guide](https://img.shields.io/badge/OMG%20Enabled-\ud83d\udc4d-green.svg?)](https://microservice.guide)\n\nAn OMG service to generate a UUID v4.\n\n## Direct usage in [Storyscript](https://storyscript.io/):\n\n##### Generate \n```coffee\nuuid generate\n#result 38788d28-6526-45c5-acf9-bb179160c7d7\n```\n\nCurious to [learn more](https://docs.storyscript.io/)?\n\n\u2728\ud83c\udf70\u2728\n\n## Usage with [OMG CLI](https://www.npmjs.com/package/omg)\n\n##### Generate\n```shell\n$ omg run generate\n```\n\n**Note**: The OMG CLI requires [Docker](https://docs.docker.com/install/) to be installed.\n\n## License\n[MIT License](https://github.com/omg-services/uuid/blob/master/LICENSE).\n"
    },
    "insertTextFormat": 1,
    "kind": 2,
    "label": "uuid",
    "textEdit": {
      "newText": "uuid ",
      "range": {
        "end": {
          "character": 0,
          "line": 0
        },
        "start": {
          "character": 0,
          "line": 0
        }
      }
    }
  },
  {
    "detail": "Loop",
    "documentation": "TBD",
    "insertTextFormat": 1,
    "kind": 14,
    "label": "foreach",
    "textEdit": {
      "newText": "foreach ",
      "range": {
        "end": {
          "character": 0,
          "line": 0
        },
        "start": {
          "character": 0,
          "line": 0
        }
      }
    }
  },
  {
    "detail": "Loop",
    "documentation": "TBD",
    "insertTextFormat": 1,
    "kind": 14,
    "label": "while",
    "textEdit": {
      "newText": "while ",
      "range": {
        "end": {
          "character": 0,
          "line": 0
        },
        "start": {
          "character": 0,
          "line": 0
        }
      }
    }
  },
  {
    "detail": "Listener",
    "documentation": "TBD",
    "insertTextFormat": 1,
    "kind": 14,
    "label": "when",
    "textEdit": {
      "newText": "when ",
      "range": {
        "end": {
          "character": 0,
          "line": 0
        },
        "start": {
          "character": 0,
          "line": 0
        }
      }
    }
  },
  {
    "detail": "Exception",
    "documentation": "TBD",
    "insertTextFormat": 1,
    "kind": 14,
    "label": "try",
    "textEdit": {
      "newText": "try ",
      "range": {
        "end": {
          "character": 0,
          "line": 0
        },
        "start": {
          "character": 0,
          "line": 0
        }
      }
    }
  },
  {
    "detail": "Exception handling",
    "documentation": "TBD",
    "insertTextFormat": 1,
    "kind": 14,
    "label": "catch",
    "textEdit": {
      "newText": "catch ",
      "range": {
        "end": {
          "character": 0,
          "line": 0
        },
        "start": {
          "character": 0,
          "line": 0
        }
      }
    }
  },
  {
    "detail": "Conditions",
    "documentation": "TBD",
    "insertTextFormat": 1,
    "kind": 14,
    "label": "if",
    "textEdit": {
      "newText": "if ",
      "range": {
        "end": {
          "character": 0,
          "line": 0
        },
        "start": {
          "character": 0,
          "line": 0
        }
      }
    }
  },
  {
    "detail": "Conditions",
    "documentation": "TBD",
    "insertTextFormat": 1,
    "kind": 14,
    "label": "else",
    "textEdit": {
      "newText": "else ",
      "range": {
        "end": {
          "character": 0,
          "line": 0
        },
        "start": {
          "character": 0,
          "line": 0
        }
      }
    }
  },
  {
    "detail": "Conditions",
    "documentation": "TBD",
    "insertTextFormat": 1,
    "kind": 14,
    "label": "else if",
    "textEdit": {
      "newText": "else if ",
      "range": {
        "end": {
          "character": 0,
          "line": 0
        },
        "start": {
          "character": 0,
          "line": 0
        }
      }
    }
  },
  {
    "detail": "Function",
    "documentation": "TBD",
    "insertTextFormat": 1,
    "kind": 14,
    "label": "function",
    "textEdit": {
      "newText": "function ",
      "range": {
        "end": {
          "character": 0,
          "line": 0
        },
        "start": {
          "character": 0,
          "line": 0
        }
      }
    }
  },
  {
    "detail": "Throw",
    "documentation": "TBD",
    "insertTextFormat": 1,
    "kind": 14,
    "label": "throw",
    "textEdit": {
      "newText": "throw ",
      "range": {
        "end": {
          "character": 0,
          "line": 0
        },
        "start": {
          "character": 0,
          "line": 0
        }
      }
    }
  }
]
