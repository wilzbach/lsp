[
  {
    "detail": "Symbol. Object",
    "documentation": "TBD",
    "insertTextFormat": 1,
    "kind": 6,
    "label": "app",
    "sortText": "20-app",
    "textEdit": {
      "newText": "app",
      "range": {
        "end": {
          "character": 6,
          "line": 3
        },
        "start": {
          "character": 4,
          "line": 3
        }
      }
    }
  },
  {
    "detail": "Crontab in Asyncy",
    "documentation": {
      "kind": "markdown",
      "value": ""
    },
    "insertTextFormat": 1,
    "kind": 2,
    "label": "crontab",
    "sortText": "40-crontab",
    "textEdit": {
      "newText": "crontab ",
      "range": {
        "end": {
          "character": 6,
          "line": 3
        },
        "start": {
          "character": 4,
          "line": 3
        }
      }
    }
  },
  {
    "detail": "Boolean value representing falsehood",
    "documentation": "Boolean value representing falsehood",
    "insertTextFormat": 1,
    "kind": 14,
    "label": "false",
    "sortText": "70-false",
    "textEdit": {
      "newText": "false ",
      "range": {
        "end": {
          "character": 6,
          "line": 3
        },
        "start": {
          "character": 4,
          "line": 3
        }
      }
    }
  },
  {
    "detail": "foo(i1:int i2:int)",
    "documentation": "Function: foo(i1:`int` i2:`int`)",
    "insertTextFormat": 2,
    "kind": 3,
    "label": "foo",
    "sortText": "20-foo",
    "textEdit": {
      "newText": "foo(i1:${1:<int>} i2:${2:<int>})",
      "range": {
        "end": {
          "character": 6,
          "line": 3
        },
        "start": {
          "character": 4,
          "line": 3
        }
      }
    }
  },
  {
    "detail": "The Asyncy API gateway server for executing Stories via HTTP.",
    "documentation": {
      "kind": "markdown",
      "value": "# Storyscript HTTP Gateway\n\nAPI gateway server for executing Stories via HTTP.\n\n```coffee\nhttp server as server\n  when server listen method:\"post\" path:\"/\" as r\n    log info msg:(r.body to string)\n    log info msg:(r.headers to string)\n    log info msg:r.headers[\"Host\"]\n    r write content:\"Hello World\"\n    r setStatus code:200\n    r finish\n```\n\n```sh\n$ curl https://foobar.storyscriptapp.com/\nHello World\n```\n\n\n## Development\n\nSetup virtual environment and install dependencies\n```\nvirtualenv -p python3.6 venv\nsource venv/bin/activate\npip install -r requirements.txt\n```\n\nYou may need to tell pycurl the path to your openssl installation\n```\npip install --install-option=\"--with-openssl\" --install-option=\"--openssl-dir=/usr/local/opt/openssl\" pycurl\n```\nSee https://github.com/nahamsec/JSParser/issues/22\n\n\nRun locally by calling\n\n```\npython -m app.main --logging=debug --debug\n```\n\n### Register an endpoint\n\n```shell\ncurl --data '{\"endpoint\": \"http://localhost:9000/story/foo\", \"data\":{\"path\":\"/ping\", \"method\": \"post\", \"host\": \"a\"}}' \\\n     -H \"Content-Type: application/json\" \\\n     localhost:8889/register\n```\n\nNow access that endpoint\n\n```shell\ncurl -X POST -d 'foobar' -H \"Host: a.storyscriptapp.com\" http://localhost:8888/ping\n```\n\n### Unregister an endpoint\n\n```shell\ncurl --data '{\"endpoint\": \"http://localhost:9000/story/foo\", \"data\":{\"path\":\"/ping\", \"method\": \"post\", \"host\": \"a\"}}' \\\n     -H \"Content-Type: application/json\" \\\n     localhost:8889/unregister\n```\n"
    },
    "insertTextFormat": 1,
    "kind": 2,
    "label": "http",
    "sortText": "40-http",
    "textEdit": {
      "newText": "http ",
      "range": {
        "end": {
          "character": 6,
          "line": 3
        },
        "start": {
          "character": 4,
          "line": 3
        }
      }
    }
  },
  {
    "detail": "An Open Microservice wrapper for the Airtable API.",
    "documentation": {
      "kind": "markdown",
      "value": "# _Airtable_ Open Microservice\n\n> An Open Microservice wrapper for the Airtable API.\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org) [![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices) [![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md) [![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com)\n[![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n\n## Introduction\n\nThis project is an example implementation of the [Open Microservice Specification](https://openmicroservices.org), a standard originally created at [Storyscript](https://storyscript.io) for building highly-portable \"microservices\" that expose the events, actions, and APIs inside containerized software.\n\n## Getting Started\n\nThe `oms` command-line interface allows you to interact with Open Microservices. If you're interested in creating an Open Microservice the CLI also helps validate, test, and debug your `oms.yml` implementation!\n\nSee the [oms-cli](https://github.com/microservices/oms) project to learn more!\n\n### Installation\n\n```\nnpm install -g @microservices/oms\n```\n\n## Usage\n\n### Open Microservices CLI Usage\n\nOnce you have the [oms-cli](https://github.com/microservices/oms) installed, you can run any of the following commands from within this project's root directory:\n\n#### Actions\n\n##### list\n\n> List records in a table.\n\n##### Action Arguments\n\n| Argument Name    | Type     | Required | Default | Description                                                                                                                                                                           |\n| :--------------- | :------- | :------- | :------ | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| baseId           | `string` | `true`   | None    | No description provided.                                                                                                                                                              |\n| tableName        | `string` | `true`   | None    | No description provided.                                                                                                                                                              |\n| view             | `string` | `false`  | None    | No description provided.                                                                                                                                                              |\n| fields           | `list`   | `false`  | None    | Only data for fields whose names are in this list will be included in the result. If you don't need every field, you can use this parameter to reduce the amount of data transferred. |\n| maxRecords       | `int`    | `false`  | None    | The maximum total number of records that will be returned in your request.                                                                                                            |\n| AIRTABLE_API_KEY | `string` | `true`   | None    | API Key provided by Airtable                                                                                                                                                          |\n\n```shell\noms run list \\\n    -a baseId='*****' \\\n    -a tableName='*****' \\\n    -a view='*****' \\\n    -a fields='*****' \\\n    -a maxRecords='*****' \\\n    -e AIRTABLE_API_KEY=$AIRTABLE_API_KEY\n```\n\n## Contributing\n\nAll suggestions in how to improve the specification and this guide are very welcome. Feel free share your thoughts in the Issue tracker, or even better, fork the repository to implement your own ideas and submit a pull request.\n\n[![Edit oms-airtable on CodeSandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/oms-services/oms-airtable)\n\nThis project is guided by [Contributor Covenant](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md). Please read out full [Contribution Guidelines](https://github.com/oms-services/.github/blob/master/CONTRIBUTING.md).\n\n## Additional Resources\n\n- [Install the CLI](https://github.com/microservices/oms) - The OMS CLI helps developers create, test, validate, and build microservices.\n- [Example OMS Services](https://github.com/oms-services) - Examples of OMS-compliant services written in a variety of languages.\n- [Example Language Implementations](https://github.com/microservices) - Find tooling & language implementations in Node, Python, Scala, Java, Clojure.\n- [Storyscript Hub](https://hub.storyscript.io) - A public registry of OMS services.\n- [Community Chat](https://spectrum.chat/open-microservices) - Have ideas? Questions? Join us on Spectrum.\n"
    },
    "insertTextFormat": 1,
    "kind": 2,
    "label": "matthewhudson/oms-airtable",
    "sortText": "40-matthewhudson/oms-airtable",
    "textEdit": {
      "newText": "matthewhudson/oms-airtable ",
      "range": {
        "end": {
          "character": 6,
          "line": 3
        },
        "start": {
          "character": 4,
          "line": 3
        }
      }
    }
  },
  {
    "detail": "An OMG service to connect to a MongoDB instance",
    "documentation": {
      "kind": "markdown",
      "value": "# _MongoDB_ Open Microservice\n\n> This is a mongodb service\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org) [![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices) [![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md) [![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com)\n\n## Introduction\n\nThis project is an example implementation of the [Open Microservice Specification](https://openmicroservices.org), a standard originally created at [Storyscript](https://storyscript.io) for building highly-portable \"microservices\" that expose the events, actions, and APIs inside containerized software.\n\n## Getting Started\n\nThe `oms` command-line interface allows you to interact with Open Microservices. If you're interested in creating an Open Microservice the CLI also helps validate, test, and debug your `oms.yml` implementation!\n\nSee the [oms-cli](https://github.com/microservices/oms) project to learn more!\n\n### Installation\n\n```\nnpm install -g @microservices/oms\n```\n\n## Usage\n\n### Open Microservices CLI Usage\n\nOnce you have the [oms-cli](https://github.com/microservices/oms) installed, you can run any of the following commands from within this project's root directory:\n\n#### Actions\n\n##### find\n\n> \n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| db | `string` | `true` | None | No description provided. |\n| coll | `string` | `true` | None | No description provided. |\n| query | `map` | `true` | None | No description provided. |\n| sort | `map` | `false` | None | No description provided. |\n| fields | `map` | `false` | None | No description provided. |\n| MONGODB_URI | `string` | `false` | None | The MongoDB URI to be used in the connection. Defaults to mongodb://localhost:27017/.  |\n\n``` shell\noms run find \\ \n    -a db='*****' \\ \n    -a coll='*****' \\ \n    -a query='*****' \\ \n    -a sort='*****' \\ \n    -a fields='*****' \\ \n    -e MONGODB_URI=$MONGODB_URI\n```\n\n##### findOne\n\n> \n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| db | `string` | `true` | None | No description provided. |\n| coll | `string` | `true` | None | No description provided. |\n| query | `map` | `true` | None | No description provided. |\n| sort | `map` | `false` | None | No description provided. |\n| fields | `map` | `false` | None | No description provided. |\n| MONGODB_URI | `string` | `false` | None | The MongoDB URI to be used in the connection. Defaults to mongodb://localhost:27017/.  |\n\n``` shell\noms run findOne \\ \n    -a db='*****' \\ \n    -a coll='*****' \\ \n    -a query='*****' \\ \n    -a sort='*****' \\ \n    -a fields='*****' \\ \n    -e MONGODB_URI=$MONGODB_URI\n```\n\n##### insert\n\n> \n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| db | `string` | `true` | None | No description provided. |\n| coll | `string` | `true` | None | No description provided. |\n| doc | `map` | `true` | None | No description provided. |\n| MONGODB_URI | `string` | `false` | None | The MongoDB URI to be used in the connection. Defaults to mongodb://localhost:27017/.  |\n\n``` shell\noms run insert \\ \n    -a db='*****' \\ \n    -a coll='*****' \\ \n    -a doc='*****' \\ \n    -e MONGODB_URI=$MONGODB_URI\n```\n\n## Contributing\n\nAll suggestions in how to improve the specification and this guide are very welcome. Feel free share your thoughts in the Issue tracker, or even better, fork the repository to implement your own ideas and submit a pull request.\n\n[![Edit mongodb on CodeSandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/oms-services/mongodb)\n\nThis project is guided by [Contributor Covenant](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md). Please read out full [Contribution Guidelines](https://github.com/oms-services/.github/blob/master/CONTRIBUTING.md).\n\n## Additional Resources\n\n* [Install the CLI](https://github.com/microservices/oms) - The OMS CLI helps developers create, test, validate, and build microservices.\n* [Example OMS Services](https://github.com/oms-services) - Examples of OMS-compliant services written in a variety of languages.\n* [Example Language Implementations](https://github.com/microservices) - Find tooling & language implementations in Node, Python, Scala, Java, Clojure.\n* [Storyscript Hub](https://hub.storyscript.io) - A public registry of OMS services.\n* [Community Chat](https://spectrum.chat/open-microservices) - Have ideas? Questions? Join us on Spectrum.\n"
    },
    "insertTextFormat": 1,
    "kind": 2,
    "label": "mongodb",
    "sortText": "40-mongodb",
    "textEdit": {
      "newText": "mongodb ",
      "range": {
        "end": {
          "character": 6,
          "line": 3
        },
        "start": {
          "character": 4,
          "line": 3
        }
      }
    }
  },
  {
    "detail": "Logical negation",
    "documentation": "Logical negation",
    "insertTextFormat": 1,
    "kind": 14,
    "label": "not",
    "sortText": "70-not",
    "textEdit": {
      "newText": "not ",
      "range": {
        "end": {
          "character": 6,
          "line": 3
        },
        "start": {
          "character": 4,
          "line": 3
        }
      }
    }
  },
  {
    "detail": "Intentional absence of any value",
    "documentation": "Intentional absence of any value",
    "insertTextFormat": 1,
    "kind": 14,
    "label": "null",
    "sortText": "70-null",
    "textEdit": {
      "newText": "null ",
      "range": {
        "end": {
          "character": 6,
          "line": 3
        },
        "start": {
          "character": 4,
          "line": 3
        }
      }
    }
  },
  {
    "detail": "An OMG service to connect to a MongoDB instance",
    "documentation": {
      "kind": "markdown",
      "value": "# _MongoDB_ Open Microservice\n\n> This is a mongodb service\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org) [![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices) [![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md) [![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com)\n\n## Introduction\n\nThis project is an example implementation of the [Open Microservice Specification](https://openmicroservices.org), a standard originally created at [Storyscript](https://storyscript.io) for building highly-portable \"microservices\" that expose the events, actions, and APIs inside containerized software.\n\n## Getting Started\n\nThe `oms` command-line interface allows you to interact with Open Microservices. If you're interested in creating an Open Microservice the CLI also helps validate, test, and debug your `oms.yml` implementation!\n\nSee the [oms-cli](https://github.com/microservices/oms) project to learn more!\n\n### Installation\n\n```\nnpm install -g @microservices/oms\n```\n\n## Usage\n\n### Open Microservices CLI Usage\n\nOnce you have the [oms-cli](https://github.com/microservices/oms) installed, you can run any of the following commands from within this project's root directory:\n\n#### Actions\n\n##### find\n\n> \n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| db | `string` | `true` | None | No description provided. |\n| coll | `string` | `true` | None | No description provided. |\n| query | `map` | `true` | None | No description provided. |\n| sort | `map` | `false` | None | No description provided. |\n| fields | `map` | `false` | None | No description provided. |\n| MONGODB_URI | `string` | `false` | None | The MongoDB URI to be used in the connection. Defaults to mongodb://localhost:27017/.  |\n\n``` shell\noms run find \\ \n    -a db='*****' \\ \n    -a coll='*****' \\ \n    -a query='*****' \\ \n    -a sort='*****' \\ \n    -a fields='*****' \\ \n    -e MONGODB_URI=$MONGODB_URI\n```\n\n##### findOne\n\n> \n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| db | `string` | `true` | None | No description provided. |\n| coll | `string` | `true` | None | No description provided. |\n| query | `map` | `true` | None | No description provided. |\n| sort | `map` | `false` | None | No description provided. |\n| fields | `map` | `false` | None | No description provided. |\n| MONGODB_URI | `string` | `false` | None | The MongoDB URI to be used in the connection. Defaults to mongodb://localhost:27017/.  |\n\n``` shell\noms run findOne \\ \n    -a db='*****' \\ \n    -a coll='*****' \\ \n    -a query='*****' \\ \n    -a sort='*****' \\ \n    -a fields='*****' \\ \n    -e MONGODB_URI=$MONGODB_URI\n```\n\n##### insert\n\n> \n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| db | `string` | `true` | None | No description provided. |\n| coll | `string` | `true` | None | No description provided. |\n| doc | `map` | `true` | None | No description provided. |\n| MONGODB_URI | `string` | `false` | None | The MongoDB URI to be used in the connection. Defaults to mongodb://localhost:27017/.  |\n\n``` shell\noms run insert \\ \n    -a db='*****' \\ \n    -a coll='*****' \\ \n    -a doc='*****' \\ \n    -e MONGODB_URI=$MONGODB_URI\n```\n\n## Contributing\n\nAll suggestions in how to improve the specification and this guide are very welcome. Feel free share your thoughts in the Issue tracker, or even better, fork the repository to implement your own ideas and submit a pull request.\n\n[![Edit mongodb on CodeSandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/oms-services/mongodb)\n\nThis project is guided by [Contributor Covenant](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md). Please read out full [Contribution Guidelines](https://github.com/oms-services/.github/blob/master/CONTRIBUTING.md).\n\n## Additional Resources\n\n* [Install the CLI](https://github.com/microservices/oms) - The OMS CLI helps developers create, test, validate, and build microservices.\n* [Example OMS Services](https://github.com/oms-services) - Examples of OMS-compliant services written in a variety of languages.\n* [Example Language Implementations](https://github.com/microservices) - Find tooling & language implementations in Node, Python, Scala, Java, Clojure.\n* [Storyscript Hub](https://hub.storyscript.io) - A public registry of OMS services.\n* [Community Chat](https://spectrum.chat/open-microservices) - Have ideas? Questions? Join us on Spectrum.\n"
    },
    "insertTextFormat": 1,
    "kind": 2,
    "label": "oms-services/mongodb",
    "sortText": "40-oms-services/mongodb",
    "textEdit": {
      "newText": "oms-services/mongodb ",
      "range": {
        "end": {
          "character": 6,
          "line": 3
        },
        "start": {
          "character": 4,
          "line": 3
        }
      }
    }
  },
  {
    "detail": "Run redis in a Story.",
    "documentation": {
      "kind": "markdown",
      "value": "# _Redis_ Open Microservice\n\n> Wrapper for the Redis key-value store\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org) [![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices) [![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md) [![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com)\n\n## Introduction\n\nThis project is an example implementation of the [Open Microservice Specification](https://openmicroservices.org), a standard originally created at [Storyscript](https://storyscript.io) for building highly-portable \"microservices\" that expose the events, actions, and APIs inside containerized software.\n\n## Getting Started\n\nThe `oms` command-line interface allows you to interact with Open Microservices. If you're interested in creating an Open Microservice the CLI also helps validate, test, and debug your `oms.yml` implementation!\n\nSee the [oms-cli](https://github.com/microservices/oms) project to learn more!\n\n### Installation\n\n```\nnpm install -g @microservices/oms\n```\n\n## Usage\n\n### Open Microservices CLI Usage\n\nOnce you have the [oms-cli](https://github.com/microservices/oms) installed, you can run any of the following commands from within this project's root directory:\n\n#### Actions\n\n##### set\n\n> Sets 'key' to hold 'value'.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | No description provided. |\n| value | `any` | `true` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run set \\ \n    -a key='*****' \\ \n    -a value='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### rpush\n\n> Insert 'value' at the end of list stored at 'key'.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | No description provided. |\n| value | `any` | `true` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run rpush \\ \n    -a key='*****' \\ \n    -a value='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### lpush\n\n> Insert 'value' at the head of list stored at 'key'.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | No description provided. |\n| value | `any` | `true` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run lpush \\ \n    -a key='*****' \\ \n    -a value='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### lpop\n\n> Removes and returns the first element of the list stored at 'key'.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run lpop \\ \n    -a key='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### rpop\n\n> Removes and returns the last element of the list stored at 'key'.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run rpop \\ \n    -a key='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### blpop\n\n> Removes and returns the first element of the list stored at 'key'.\nWhen there are no element in the list, the command will not return\nuntil an element got added.\n\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run blpop \\ \n    -a key='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### brpop\n\n> Removes and returns the last element of the list stored at 'key'.\nWhen there are no element in the list, the command will not return\nuntil an elements got added.\n\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run brpop \\ \n    -a key='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### delete\n\n> Removes 'key'.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run delete \\ \n    -a key='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### get\n\n> Returns the value of 'key'.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run get \\ \n    -a key='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### mget\n\n> Returns the values of multiple 'keys'.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| keys | `list` | `false` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run mget \\ \n    -a keys='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### increment\n\n> Increments a number stored at 'key'.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | No description provided. |\n| by | `int` | `false` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run increment \\ \n    -a key='*****' \\ \n    -a by='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### decrement\n\n> Decrements a number stored at 'key'.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | No description provided. |\n| by | `int` | `false` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run decrement \\ \n    -a key='*****' \\ \n    -a by='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### append\n\n> Appends 'value' to a 'key'.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | No description provided. |\n| value | `any` | `true` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run append \\ \n    -a key='*****' \\ \n    -a value='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### getSet\n\n> Returns the current value of 'key' and overwrites it with 'value'.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | No description provided. |\n| value | `any` | `true` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run getSet \\ \n    -a key='*****' \\ \n    -a value='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### setnx\n\n> Set a 'key' to 'value' only if the key does not exist yet.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | No description provided. |\n| value | `any` | `true` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run setnx \\ \n    -a key='*****' \\ \n    -a value='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### mset\n\n> Sets multiple 'key'/'value' pairs simultaneously.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| pairs | `map` | `false` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run mset \\ \n    -a pairs='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### msetnx\n\n> Sets multiple 'key'/'value' pairs simultaneously.\nOnly non-existing keys will be set.\n\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| pairs | `map` | `false` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run msetnx \\ \n    -a pairs='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### expire\n\n> Set a timeout on a 'key'.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | No description provided. |\n| seconds | `int` | `true` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run expire \\ \n    -a key='*****' \\ \n    -a seconds='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### rpop\n\n> RPOP a key constantly, and emit the values as events\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | The key to RPOP |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms subscribe rpop \\ \n    -a key='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n,##### lpop\n\n> LPOP a key constantly, and emit the values as events\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | The key to LPOP |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms subscribe lpop \\ \n    -a key='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n## Contributing\n\nAll suggestions in how to improve the specification and this guide are very welcome. Feel free share your thoughts in the Issue tracker, or even better, fork the repository to implement your own ideas and submit a pull request.\n\n[![Edit redis on CodeSandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/oms-services/redis)\n\nThis project is guided by [Contributor Covenant](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md). Please read out full [Contribution Guidelines](https://github.com/oms-services/.github/blob/master/CONTRIBUTING.md).\n\n## Additional Resources\n\n* [Install the CLI](https://github.com/microservices/oms) - The OMS CLI helps developers create, test, validate, and build microservices.\n* [Example OMS Services](https://github.com/oms-services) - Examples of OMS-compliant services written in a variety of languages.\n* [Example Language Implementations](https://github.com/microservices) - Find tooling & language implementations in Node, Python, Scala, Java, Clojure.\n* [Storyscript Hub](https://hub.storyscript.io) - A public registry of OMS services.\n* [Community Chat](https://spectrum.chat/open-microservices) - Have ideas? Questions? Join us on Spectrum.\n"
    },
    "insertTextFormat": 1,
    "kind": 2,
    "label": "oms-services/redis",
    "sortText": "40-oms-services/redis",
    "textEdit": {
      "newText": "oms-services/redis ",
      "range": {
        "end": {
          "character": 6,
          "line": 3
        },
        "start": {
          "character": 4,
          "line": 3
        }
      }
    }
  },
  {
    "detail": "Slack bot microservice",
    "documentation": {
      "kind": "markdown",
      "value": "# _Slack_ Open Microservice\n\n> Wrapper for the Slack API\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org) [![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices) [![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md) [![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com)\n\n## Introduction\n\nThis project is an example implementation of the [Open Microservice Specification](https://openmicroservices.org), a standard originally created at [Storyscript](https://storyscript.io) for building highly-portable \"microservices\" that expose the events, actions, and APIs inside containerized software.\n\n## Getting Started\n\nThe `oms` command-line interface allows you to interact with Open Microservices. If you're interested in creating an Open Microservice the CLI also helps validate, test, and debug your `oms.yml` implementation!\n\nSee the [oms-cli](https://github.com/microservices/oms) project to learn more!\n\n### Installation\n\n```\nnpm install -g @microservices/oms\n```\n\n## Usage\n\n### Open Microservices CLI Usage\n\nOnce you have the [oms-cli](https://github.com/microservices/oms) installed, you can run any of the following commands from within this project's root directory:\n\n#### Actions\n\n##### send\n\n> Sends a message to a channel.\nhttps://api.slack.com/methods/chat.postMessage\n\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| text | `string` | `true` | None | Text of the message to send. |\n| channel | `string` | `true` | None | What channel to send message in. This can be a \"#channel\" \"@user\" or a channel id.  |\n| attachments | `list` | `false` | None | No description provided. |\n| token | `string` | `false` | None | Authentication token bearing required scopes. Environment variable BOT_TOKEN used by default.  |\n| BOT_TOKEN | `string` | `false` | None | The Slack bot token |\n\n``` shell\noms run send \\ \n    -a text='*****' \\ \n    -a channel='*****' \\ \n    -a attachments='*****' \\ \n    -a token='*****' \\ \n    -e BOT_TOKEN=$BOT_TOKEN\n```\n\n##### hears\n\n> Triggered anytime a messages matches the pattern\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| pattern | `string` | `false` | None | A regexp pattern to filter messages |\n| channel | `string` | `true` | None | Only listen in a specific channel |\n| BOT_TOKEN | `string` | `false` | None | The Slack bot token |\n\n``` shell\noms subscribe hears \\ \n    -a pattern='*****' \\ \n    -a channel='*****' \\ \n    -e BOT_TOKEN=$BOT_TOKEN\n```\n,##### responds\n\n> Triggered by direct messages to the bot\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| pattern | `string` | `false` | None | A regexp pattern to filter messages |\n| BOT_TOKEN | `string` | `false` | None | The Slack bot token |\n\n``` shell\noms subscribe responds \\ \n    -a pattern='*****' \\ \n    -e BOT_TOKEN=$BOT_TOKEN\n```\n\n##### users\n\n> \n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| token | `string` | `false` | None | Authentication token bearing required scopes. Environment variable BOT_TOKEN used by default.  |\n| include_locale | `boolean` | `false` | None | Set this to true to receive the locale for users. Defaults to false  |\n| limit | `int` | `false` | None | The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached.  |\n| cursor | `string` | `false` | None | Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned by a previous request's response_metadata. Default value fetches the first \"page\" of the collection. See pagination for more detail.  |\n| BOT_TOKEN | `string` | `false` | None | The Slack bot token |\n\n``` shell\noms run users \\ \n    -a token='*****' \\ \n    -a include_locale='*****' \\ \n    -a limit='*****' \\ \n    -a cursor='*****' \\ \n    -e BOT_TOKEN=$BOT_TOKEN\n```\n\n##### channels\n\n> Get a list of channels\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| token | `string` | `false` | None | Authentication token bearing required scopes. Environment variable BOT_TOKEN used by default.  |\n| limit | `int` | `false` | None | Limit the number of channels to return. Must be less than 1000. |\n| exclude_archived | `boolean` | `false` | None | Set to true to exclude archived channels from the list |\n| types | `list` | `false` | None | Mix and match channel types: public_channel, private_channel, mpim, im Default is public_channel only.  |\n| BOT_TOKEN | `string` | `false` | None | The Slack bot token |\n\n``` shell\noms run channels \\ \n    -a token='*****' \\ \n    -a limit='*****' \\ \n    -a exclude_archived='*****' \\ \n    -a types='*****' \\ \n    -e BOT_TOKEN=$BOT_TOKEN\n```\n\n##### directChannels\n\n> Lists direct message channels for the calling user.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| token | `string` | `false` | None | Authentication token bearing required scopes. Environment variable BOT_TOKEN used by default.  |\n| limit | `int` | `false` | None | Limit the number of channels to return. Must be less than 1000. |\n| BOT_TOKEN | `string` | `false` | None | The Slack bot token |\n\n``` shell\noms run directChannels \\ \n    -a token='*****' \\ \n    -a limit='*****' \\ \n    -e BOT_TOKEN=$BOT_TOKEN\n```\n\n## Contributing\n\nAll suggestions in how to improve the specification and this guide are very welcome. Feel free share your thoughts in the Issue tracker, or even better, fork the repository to implement your own ideas and submit a pull request.\n\n[![Edit slack on CodeSandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/oms-services/slack)\n\nThis project is guided by [Contributor Covenant](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md). Please read out full [Contribution Guidelines](https://github.com/oms-services/.github/blob/master/CONTRIBUTING.md).\n\n## Additional Resources\n\n* [Install the CLI](https://github.com/microservices/oms) - The OMS CLI helps developers create, test, validate, and build microservices.\n* [Example OMS Services](https://github.com/oms-services) - Examples of OMS-compliant services written in a variety of languages.\n* [Example Language Implementations](https://github.com/microservices) - Find tooling & language implementations in Node, Python, Scala, Java, Clojure.\n* [Storyscript Hub](https://hub.storyscript.io) - A public registry of OMS services.\n* [Community Chat](https://spectrum.chat/open-microservices) - Have ideas? Questions? Join us on Spectrum.\n"
    },
    "insertTextFormat": 1,
    "kind": 2,
    "label": "oms-services/slack",
    "sortText": "40-oms-services/slack",
    "textEdit": {
      "newText": "oms-services/slack ",
      "range": {
        "end": {
          "character": 6,
          "line": 3
        },
        "start": {
          "character": 4,
          "line": 3
        }
      }
    }
  },
  {
    "detail": "UUID generator",
    "documentation": {
      "kind": "markdown",
      "value": "# _UUID_ Open Microservice\n\n> This is a UUID service\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org) [![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices) [![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md) [![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com)\n\n## Introduction\n\nThis project is an example implementation of the [Open Microservice Specification](https://openmicroservices.org), a standard originally created at [Storyscript](https://storyscript.io) for building highly-portable \"microservices\" that expose the events, actions, and APIs inside containerized software.\n\n## Getting Started\n\nThe `oms` command-line interface allows you to interact with Open Microservices. If you're interested in creating an Open Microservice the CLI also helps validate, test, and debug your `oms.yml` implementation!\n\nSee the [oms-cli](https://github.com/microservices/oms) project to learn more!\n\n### Installation\n\n```\nnpm install -g @microservices/oms\n```\n\n## Usage\n\n### Open Microservices CLI Usage\n\nOnce you have the [oms-cli](https://github.com/microservices/oms) installed, you can run any of the following commands from within this project's root directory:\n\n#### Actions\n\n##### generate\n\n> Generate a UUID v4 like 38788d28-6526-45c5-acf9-bb179160c7d7\n\n```shell\noms run generate\n```\n\n## Contributing\n\nAll suggestions in how to improve the specification and this guide are very welcome. Feel free share your thoughts in the Issue tracker, or even better, fork the repository to implement your own ideas and submit a pull request.\n\n[![Edit uuid on CodeSandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/oms-services/uuid)\n\nThis project is guided by [Contributor Covenant](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md). Please read out full [Contribution Guidelines](https://github.com/oms-services/.github/blob/master/CONTRIBUTING.md).\n\n## Additional Resources\n\n- [Install the CLI](https://github.com/microservices/oms) - The OMS CLI helps developers create, test, validate, and build microservices.\n- [Example OMS Services](https://github.com/oms-services) - Examples of OMS-compliant services written in a variety of languages.\n- [Example Language Implementations](https://github.com/microservices) - Find tooling & language implementations in Node, Python, Scala, Java, Clojure.\n- [Storyscript Hub](https://hub.storyscript.io) - A public registry of OMS services.\n- [Community Chat](https://spectrum.chat/open-microservices) - Have ideas? Questions? Join us on Spectrum.\n"
    },
    "insertTextFormat": 1,
    "kind": 2,
    "label": "oms-services/uuid",
    "sortText": "40-oms-services/uuid",
    "textEdit": {
      "newText": "oms-services/uuid ",
      "range": {
        "end": {
          "character": 6,
          "line": 3
        },
        "start": {
          "character": 4,
          "line": 3
        }
      }
    }
  },
  {
    "detail": "Run redis in a Story.",
    "documentation": {
      "kind": "markdown",
      "value": "# _Redis_ Open Microservice\n\n> Wrapper for the Redis key-value store\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org) [![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices) [![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md) [![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com)\n\n## Introduction\n\nThis project is an example implementation of the [Open Microservice Specification](https://openmicroservices.org), a standard originally created at [Storyscript](https://storyscript.io) for building highly-portable \"microservices\" that expose the events, actions, and APIs inside containerized software.\n\n## Getting Started\n\nThe `oms` command-line interface allows you to interact with Open Microservices. If you're interested in creating an Open Microservice the CLI also helps validate, test, and debug your `oms.yml` implementation!\n\nSee the [oms-cli](https://github.com/microservices/oms) project to learn more!\n\n### Installation\n\n```\nnpm install -g @microservices/oms\n```\n\n## Usage\n\n### Open Microservices CLI Usage\n\nOnce you have the [oms-cli](https://github.com/microservices/oms) installed, you can run any of the following commands from within this project's root directory:\n\n#### Actions\n\n##### set\n\n> Sets 'key' to hold 'value'.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | No description provided. |\n| value | `any` | `true` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run set \\ \n    -a key='*****' \\ \n    -a value='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### rpush\n\n> Insert 'value' at the end of list stored at 'key'.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | No description provided. |\n| value | `any` | `true` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run rpush \\ \n    -a key='*****' \\ \n    -a value='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### lpush\n\n> Insert 'value' at the head of list stored at 'key'.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | No description provided. |\n| value | `any` | `true` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run lpush \\ \n    -a key='*****' \\ \n    -a value='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### lpop\n\n> Removes and returns the first element of the list stored at 'key'.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run lpop \\ \n    -a key='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### rpop\n\n> Removes and returns the last element of the list stored at 'key'.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run rpop \\ \n    -a key='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### blpop\n\n> Removes and returns the first element of the list stored at 'key'.\nWhen there are no element in the list, the command will not return\nuntil an element got added.\n\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run blpop \\ \n    -a key='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### brpop\n\n> Removes and returns the last element of the list stored at 'key'.\nWhen there are no element in the list, the command will not return\nuntil an elements got added.\n\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run brpop \\ \n    -a key='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### delete\n\n> Removes 'key'.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run delete \\ \n    -a key='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### get\n\n> Returns the value of 'key'.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run get \\ \n    -a key='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### mget\n\n> Returns the values of multiple 'keys'.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| keys | `list` | `false` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run mget \\ \n    -a keys='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### increment\n\n> Increments a number stored at 'key'.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | No description provided. |\n| by | `int` | `false` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run increment \\ \n    -a key='*****' \\ \n    -a by='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### decrement\n\n> Decrements a number stored at 'key'.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | No description provided. |\n| by | `int` | `false` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run decrement \\ \n    -a key='*****' \\ \n    -a by='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### append\n\n> Appends 'value' to a 'key'.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | No description provided. |\n| value | `any` | `true` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run append \\ \n    -a key='*****' \\ \n    -a value='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### getSet\n\n> Returns the current value of 'key' and overwrites it with 'value'.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | No description provided. |\n| value | `any` | `true` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run getSet \\ \n    -a key='*****' \\ \n    -a value='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### setnx\n\n> Set a 'key' to 'value' only if the key does not exist yet.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | No description provided. |\n| value | `any` | `true` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run setnx \\ \n    -a key='*****' \\ \n    -a value='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### mset\n\n> Sets multiple 'key'/'value' pairs simultaneously.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| pairs | `map` | `false` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run mset \\ \n    -a pairs='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### msetnx\n\n> Sets multiple 'key'/'value' pairs simultaneously.\nOnly non-existing keys will be set.\n\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| pairs | `map` | `false` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run msetnx \\ \n    -a pairs='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### expire\n\n> Set a timeout on a 'key'.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | No description provided. |\n| seconds | `int` | `true` | None | No description provided. |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms run expire \\ \n    -a key='*****' \\ \n    -a seconds='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n##### rpop\n\n> RPOP a key constantly, and emit the values as events\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | The key to RPOP |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms subscribe rpop \\ \n    -a key='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n,##### lpop\n\n> LPOP a key constantly, and emit the values as events\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| key | `string` | `true` | None | The key to LPOP |\n| REDIS_HOST | `string` | `false` | None | No description provided. |\n| REDIS_PORT | `int` | `false` | None | No description provided. |\n| REDIS_DB | `string` | `false` | None | No description provided. |\n| REDIS_PASSWORD | `string` | `false` | None | No description provided. |\n\n``` shell\noms subscribe lpop \\ \n    -a key='*****' \\ \n    -e REDIS_HOST=$REDIS_HOST \\ \n    -e REDIS_PORT=$REDIS_PORT \\ \n    -e REDIS_DB=$REDIS_DB \\ \n    -e REDIS_PASSWORD=$REDIS_PASSWORD\n```\n\n## Contributing\n\nAll suggestions in how to improve the specification and this guide are very welcome. Feel free share your thoughts in the Issue tracker, or even better, fork the repository to implement your own ideas and submit a pull request.\n\n[![Edit redis on CodeSandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/oms-services/redis)\n\nThis project is guided by [Contributor Covenant](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md). Please read out full [Contribution Guidelines](https://github.com/oms-services/.github/blob/master/CONTRIBUTING.md).\n\n## Additional Resources\n\n* [Install the CLI](https://github.com/microservices/oms) - The OMS CLI helps developers create, test, validate, and build microservices.\n* [Example OMS Services](https://github.com/oms-services) - Examples of OMS-compliant services written in a variety of languages.\n* [Example Language Implementations](https://github.com/microservices) - Find tooling & language implementations in Node, Python, Scala, Java, Clojure.\n* [Storyscript Hub](https://hub.storyscript.io) - A public registry of OMS services.\n* [Community Chat](https://spectrum.chat/open-microservices) - Have ideas? Questions? Join us on Spectrum.\n"
    },
    "insertTextFormat": 1,
    "kind": 2,
    "label": "redis",
    "sortText": "40-redis",
    "textEdit": {
      "newText": "redis ",
      "range": {
        "end": {
          "character": 6,
          "line": 3
        },
        "start": {
          "character": 4,
          "line": 3
        }
      }
    }
  },
  {
    "detail": "Slack bot microservice",
    "documentation": {
      "kind": "markdown",
      "value": "# _Slack_ Open Microservice\n\n> Wrapper for the Slack API\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org) [![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices) [![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md) [![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com)\n\n## Introduction\n\nThis project is an example implementation of the [Open Microservice Specification](https://openmicroservices.org), a standard originally created at [Storyscript](https://storyscript.io) for building highly-portable \"microservices\" that expose the events, actions, and APIs inside containerized software.\n\n## Getting Started\n\nThe `oms` command-line interface allows you to interact with Open Microservices. If you're interested in creating an Open Microservice the CLI also helps validate, test, and debug your `oms.yml` implementation!\n\nSee the [oms-cli](https://github.com/microservices/oms) project to learn more!\n\n### Installation\n\n```\nnpm install -g @microservices/oms\n```\n\n## Usage\n\n### Open Microservices CLI Usage\n\nOnce you have the [oms-cli](https://github.com/microservices/oms) installed, you can run any of the following commands from within this project's root directory:\n\n#### Actions\n\n##### send\n\n> Sends a message to a channel.\nhttps://api.slack.com/methods/chat.postMessage\n\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| text | `string` | `true` | None | Text of the message to send. |\n| channel | `string` | `true` | None | What channel to send message in. This can be a \"#channel\" \"@user\" or a channel id.  |\n| attachments | `list` | `false` | None | No description provided. |\n| token | `string` | `false` | None | Authentication token bearing required scopes. Environment variable BOT_TOKEN used by default.  |\n| BOT_TOKEN | `string` | `false` | None | The Slack bot token |\n\n``` shell\noms run send \\ \n    -a text='*****' \\ \n    -a channel='*****' \\ \n    -a attachments='*****' \\ \n    -a token='*****' \\ \n    -e BOT_TOKEN=$BOT_TOKEN\n```\n\n##### hears\n\n> Triggered anytime a messages matches the pattern\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| pattern | `string` | `false` | None | A regexp pattern to filter messages |\n| channel | `string` | `true` | None | Only listen in a specific channel |\n| BOT_TOKEN | `string` | `false` | None | The Slack bot token |\n\n``` shell\noms subscribe hears \\ \n    -a pattern='*****' \\ \n    -a channel='*****' \\ \n    -e BOT_TOKEN=$BOT_TOKEN\n```\n,##### responds\n\n> Triggered by direct messages to the bot\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| pattern | `string` | `false` | None | A regexp pattern to filter messages |\n| BOT_TOKEN | `string` | `false` | None | The Slack bot token |\n\n``` shell\noms subscribe responds \\ \n    -a pattern='*****' \\ \n    -e BOT_TOKEN=$BOT_TOKEN\n```\n\n##### users\n\n> \n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| token | `string` | `false` | None | Authentication token bearing required scopes. Environment variable BOT_TOKEN used by default.  |\n| include_locale | `boolean` | `false` | None | Set this to true to receive the locale for users. Defaults to false  |\n| limit | `int` | `false` | None | The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached.  |\n| cursor | `string` | `false` | None | Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned by a previous request's response_metadata. Default value fetches the first \"page\" of the collection. See pagination for more detail.  |\n| BOT_TOKEN | `string` | `false` | None | The Slack bot token |\n\n``` shell\noms run users \\ \n    -a token='*****' \\ \n    -a include_locale='*****' \\ \n    -a limit='*****' \\ \n    -a cursor='*****' \\ \n    -e BOT_TOKEN=$BOT_TOKEN\n```\n\n##### channels\n\n> Get a list of channels\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| token | `string` | `false` | None | Authentication token bearing required scopes. Environment variable BOT_TOKEN used by default.  |\n| limit | `int` | `false` | None | Limit the number of channels to return. Must be less than 1000. |\n| exclude_archived | `boolean` | `false` | None | Set to true to exclude archived channels from the list |\n| types | `list` | `false` | None | Mix and match channel types: public_channel, private_channel, mpim, im Default is public_channel only.  |\n| BOT_TOKEN | `string` | `false` | None | The Slack bot token |\n\n``` shell\noms run channels \\ \n    -a token='*****' \\ \n    -a limit='*****' \\ \n    -a exclude_archived='*****' \\ \n    -a types='*****' \\ \n    -e BOT_TOKEN=$BOT_TOKEN\n```\n\n##### directChannels\n\n> Lists direct message channels for the calling user.\n##### Action Arguments\n\n| Argument Name | Type | Required | Default | Description |\n|:------------- |:---- |:-------- |:--------|:----------- |\n| token | `string` | `false` | None | Authentication token bearing required scopes. Environment variable BOT_TOKEN used by default.  |\n| limit | `int` | `false` | None | Limit the number of channels to return. Must be less than 1000. |\n| BOT_TOKEN | `string` | `false` | None | The Slack bot token |\n\n``` shell\noms run directChannels \\ \n    -a token='*****' \\ \n    -a limit='*****' \\ \n    -e BOT_TOKEN=$BOT_TOKEN\n```\n\n## Contributing\n\nAll suggestions in how to improve the specification and this guide are very welcome. Feel free share your thoughts in the Issue tracker, or even better, fork the repository to implement your own ideas and submit a pull request.\n\n[![Edit slack on CodeSandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/oms-services/slack)\n\nThis project is guided by [Contributor Covenant](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md). Please read out full [Contribution Guidelines](https://github.com/oms-services/.github/blob/master/CONTRIBUTING.md).\n\n## Additional Resources\n\n* [Install the CLI](https://github.com/microservices/oms) - The OMS CLI helps developers create, test, validate, and build microservices.\n* [Example OMS Services](https://github.com/oms-services) - Examples of OMS-compliant services written in a variety of languages.\n* [Example Language Implementations](https://github.com/microservices) - Find tooling & language implementations in Node, Python, Scala, Java, Clojure.\n* [Storyscript Hub](https://hub.storyscript.io) - A public registry of OMS services.\n* [Community Chat](https://spectrum.chat/open-microservices) - Have ideas? Questions? Join us on Spectrum.\n"
    },
    "insertTextFormat": 1,
    "kind": 2,
    "label": "slack",
    "sortText": "40-slack",
    "textEdit": {
      "newText": "slack ",
      "range": {
        "end": {
          "character": 6,
          "line": 3
        },
        "start": {
          "character": 4,
          "line": 3
        }
      }
    }
  },
  {
    "detail": "Crontab in Asyncy",
    "documentation": {
      "kind": "markdown",
      "value": ""
    },
    "insertTextFormat": 1,
    "kind": 2,
    "label": "storyscript/crontab",
    "sortText": "40-storyscript/crontab",
    "textEdit": {
      "newText": "storyscript/crontab ",
      "range": {
        "end": {
          "character": 6,
          "line": 3
        },
        "start": {
          "character": 4,
          "line": 3
        }
      }
    }
  },
  {
    "detail": "The Asyncy API gateway server for executing Stories via HTTP.",
    "documentation": {
      "kind": "markdown",
      "value": "# Storyscript HTTP Gateway\n\nAPI gateway server for executing Stories via HTTP.\n\n```coffee\nhttp server as server\n  when server listen method:\"post\" path:\"/\" as r\n    log info msg:(r.body to string)\n    log info msg:(r.headers to string)\n    log info msg:r.headers[\"Host\"]\n    r write content:\"Hello World\"\n    r setStatus code:200\n    r finish\n```\n\n```sh\n$ curl https://foobar.storyscriptapp.com/\nHello World\n```\n\n\n## Development\n\nSetup virtual environment and install dependencies\n```\nvirtualenv -p python3.6 venv\nsource venv/bin/activate\npip install -r requirements.txt\n```\n\nYou may need to tell pycurl the path to your openssl installation\n```\npip install --install-option=\"--with-openssl\" --install-option=\"--openssl-dir=/usr/local/opt/openssl\" pycurl\n```\nSee https://github.com/nahamsec/JSParser/issues/22\n\n\nRun locally by calling\n\n```\npython -m app.main --logging=debug --debug\n```\n\n### Register an endpoint\n\n```shell\ncurl --data '{\"endpoint\": \"http://localhost:9000/story/foo\", \"data\":{\"path\":\"/ping\", \"method\": \"post\", \"host\": \"a\"}}' \\\n     -H \"Content-Type: application/json\" \\\n     localhost:8889/register\n```\n\nNow access that endpoint\n\n```shell\ncurl -X POST -d 'foobar' -H \"Host: a.storyscriptapp.com\" http://localhost:8888/ping\n```\n\n### Unregister an endpoint\n\n```shell\ncurl --data '{\"endpoint\": \"http://localhost:9000/story/foo\", \"data\":{\"path\":\"/ping\", \"method\": \"post\", \"host\": \"a\"}}' \\\n     -H \"Content-Type: application/json\" \\\n     localhost:8889/unregister\n```\n"
    },
    "insertTextFormat": 1,
    "kind": 2,
    "label": "storyscript/http",
    "sortText": "40-storyscript/http",
    "textEdit": {
      "newText": "storyscript/http ",
      "range": {
        "end": {
          "character": 6,
          "line": 3
        },
        "start": {
          "character": 4,
          "line": 3
        }
      }
    }
  },
  {
    "detail": "Boolean value representing truth",
    "documentation": "Boolean value representing truth",
    "insertTextFormat": 1,
    "kind": 14,
    "label": "true",
    "sortText": "70-true",
    "textEdit": {
      "newText": "true ",
      "range": {
        "end": {
          "character": 6,
          "line": 3
        },
        "start": {
          "character": 4,
          "line": 3
        }
      }
    }
  },
  {
    "detail": "UUID generator",
    "documentation": {
      "kind": "markdown",
      "value": "# _UUID_ Open Microservice\n\n> This is a UUID service\n\n[![Open Microservice Specification Version](https://img.shields.io/badge/Open%20Microservice-1.0-477bf3.svg)](https://openmicroservices.org) [![Open Microservices Spectrum Chat](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/open-microservices) [![Open Microservices Code of Conduct](https://img.shields.io/badge/Contributor%20Covenant-v1.4%20adopted-ff69b4.svg)](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md) [![Open Microservices Commitzen](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](http://makeapullrequest.com)\n\n## Introduction\n\nThis project is an example implementation of the [Open Microservice Specification](https://openmicroservices.org), a standard originally created at [Storyscript](https://storyscript.io) for building highly-portable \"microservices\" that expose the events, actions, and APIs inside containerized software.\n\n## Getting Started\n\nThe `oms` command-line interface allows you to interact with Open Microservices. If you're interested in creating an Open Microservice the CLI also helps validate, test, and debug your `oms.yml` implementation!\n\nSee the [oms-cli](https://github.com/microservices/oms) project to learn more!\n\n### Installation\n\n```\nnpm install -g @microservices/oms\n```\n\n## Usage\n\n### Open Microservices CLI Usage\n\nOnce you have the [oms-cli](https://github.com/microservices/oms) installed, you can run any of the following commands from within this project's root directory:\n\n#### Actions\n\n##### generate\n\n> Generate a UUID v4 like 38788d28-6526-45c5-acf9-bb179160c7d7\n\n```shell\noms run generate\n```\n\n## Contributing\n\nAll suggestions in how to improve the specification and this guide are very welcome. Feel free share your thoughts in the Issue tracker, or even better, fork the repository to implement your own ideas and submit a pull request.\n\n[![Edit uuid on CodeSandbox](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/oms-services/uuid)\n\nThis project is guided by [Contributor Covenant](https://github.com/oms-services/.github/blob/master/CODE_OF_CONDUCT.md). Please read out full [Contribution Guidelines](https://github.com/oms-services/.github/blob/master/CONTRIBUTING.md).\n\n## Additional Resources\n\n- [Install the CLI](https://github.com/microservices/oms) - The OMS CLI helps developers create, test, validate, and build microservices.\n- [Example OMS Services](https://github.com/oms-services) - Examples of OMS-compliant services written in a variety of languages.\n- [Example Language Implementations](https://github.com/microservices) - Find tooling & language implementations in Node, Python, Scala, Java, Clojure.\n- [Storyscript Hub](https://hub.storyscript.io) - A public registry of OMS services.\n- [Community Chat](https://spectrum.chat/open-microservices) - Have ideas? Questions? Join us on Spectrum.\n"
    },
    "insertTextFormat": 1,
    "kind": 2,
    "label": "uuid",
    "sortText": "40-uuid",
    "textEdit": {
      "newText": "uuid ",
      "range": {
        "end": {
          "character": 6,
          "line": 3
        },
        "start": {
          "character": 4,
          "line": 3
        }
      }
    }
  }
]
