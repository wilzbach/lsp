[
  {
    "detail": "append(item:int)",
    "documentation": {
      "kind": "markdown",
      "value": "returns a new list with `item` added to the end of it"
    },
    "filterText": "ls.append",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "append",
    "sortText": "20-append",
    "textEdit": {
      "newText": "ls.append($1)",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 4,
          "line": 1
        }
      }
    }
  },
  {
    "detail": "contains(item:int)",
    "documentation": {
      "kind": "markdown",
      "value": "returns true if `item` is present, false otherwise"
    },
    "filterText": "ls.contains",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "contains",
    "sortText": "20-contains",
    "textEdit": {
      "newText": "ls.contains($1)",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 4,
          "line": 1
        }
      }
    }
  },
  {
    "detail": "index(of:int)",
    "documentation": {
      "kind": "markdown",
      "value": "returns the index of an item or -1 if the list doesn't contain the item"
    },
    "filterText": "ls.index",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "index",
    "sortText": "20-index",
    "textEdit": {
      "newText": "ls.index($1)",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 4,
          "line": 1
        }
      }
    }
  },
  {
    "detail": "join(sep:string)",
    "documentation": {
      "kind": "markdown",
      "value": "returns a string with all elements in list concatenated (joined) by the separator `sep`"
    },
    "filterText": "ls.join",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "join",
    "sortText": "20-join",
    "textEdit": {
      "newText": "ls.join($1)",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 4,
          "line": 1
        }
      }
    }
  },
  {
    "detail": "length()",
    "documentation": {
      "kind": "markdown",
      "value": "returns the length of the list"
    },
    "filterText": "ls.length",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "length",
    "sortText": "20-length",
    "textEdit": {
      "newText": "ls.length($1)",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 4,
          "line": 1
        }
      }
    }
  },
  {
    "detail": "max()",
    "documentation": {
      "kind": "markdown",
      "value": "returns the largest of the items in this list (if it contains numbers)"
    },
    "filterText": "ls.max",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "max",
    "sortText": "20-max",
    "textEdit": {
      "newText": "ls.max($1)",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 4,
          "line": 1
        }
      }
    }
  },
  {
    "detail": "min()",
    "documentation": {
      "kind": "markdown",
      "value": "returns the lowest of the items in this list (if it contains numbers)"
    },
    "filterText": "ls.min",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "min",
    "sortText": "20-min",
    "textEdit": {
      "newText": "ls.min($1)",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 4,
          "line": 1
        }
      }
    }
  },
  {
    "detail": "prepend(item:int)",
    "documentation": {
      "kind": "markdown",
      "value": "returns a new list with `item` added to the start of it"
    },
    "filterText": "ls.prepend",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "prepend",
    "sortText": "20-prepend",
    "textEdit": {
      "newText": "ls.prepend($1)",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 4,
          "line": 1
        }
      }
    }
  },
  {
    "detail": "random()",
    "documentation": {
      "kind": "markdown",
      "value": "returns a random element from this list"
    },
    "filterText": "ls.random",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "random",
    "sortText": "20-random",
    "textEdit": {
      "newText": "ls.random($1)",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 4,
          "line": 1
        }
      }
    }
  },
  {
    "detail": "remove(item:int)",
    "documentation": {
      "kind": "markdown",
      "value": "returns a new list, with `item` removed from the list"
    },
    "filterText": "ls.remove",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "remove",
    "sortText": "20-remove",
    "textEdit": {
      "newText": "ls.remove($1)",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 4,
          "line": 1
        }
      }
    }
  },
  {
    "detail": "replace(by:int item:int)",
    "documentation": {
      "kind": "markdown",
      "value": "returns a new list, where all occurrences of `item` replaced with `by`"
    },
    "filterText": "ls.replace",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "replace",
    "sortText": "20-replace",
    "textEdit": {
      "newText": "ls.replace($1)",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 4,
          "line": 1
        }
      }
    }
  },
  {
    "detail": "reverse()",
    "documentation": {
      "kind": "markdown",
      "value": "returns a new list, in reverse order"
    },
    "filterText": "ls.reverse",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "reverse",
    "sortText": "20-reverse",
    "textEdit": {
      "newText": "ls.reverse($1)",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 4,
          "line": 1
        }
      }
    }
  },
  {
    "detail": "slice(start:int)\nslice(end:int start:int)\nslice(end:int)",
    "documentation": {
      "kind": "markdown",
      "value": "### slice(start:int)\nreturns a new list, with items starting from the index `start` (inclusive)\n\n### slice(end:int start:int)\nreturns a new list, with items starting from the index `start` (inclusive), to the index `end` (exclusive)\n\n### slice(end:int)\nreturns a new list, with all items until the index `end` (exclusive)"
    },
    "filterText": "ls.slice",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "slice",
    "sortText": "20-slice",
    "textEdit": {
      "newText": "ls.slice($1)",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 4,
          "line": 1
        }
      }
    }
  },
  {
    "detail": "sort()",
    "documentation": {
      "kind": "markdown",
      "value": "returns a new list, sorted in an ascending fashion"
    },
    "filterText": "ls.sort",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "sort",
    "sortText": "20-sort",
    "textEdit": {
      "newText": "ls.sort($1)",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 4,
          "line": 1
        }
      }
    }
  },
  {
    "detail": "sum()",
    "documentation": {
      "kind": "markdown",
      "value": "returns the sum of all the items in this list (if it contains numbers)"
    },
    "filterText": "ls.sum",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "sum",
    "sortText": "20-sum",
    "textEdit": {
      "newText": "ls.sum($1)",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 4,
          "line": 1
        }
      }
    }
  },
  {
    "detail": "unique()",
    "documentation": {
      "kind": "markdown",
      "value": "returns a new list, which will contain only unique items"
    },
    "filterText": "ls.unique",
    "insertTextFormat": 2,
    "kind": 2,
    "label": "unique",
    "sortText": "20-unique",
    "textEdit": {
      "newText": "ls.unique($1)",
      "range": {
        "end": {
          "character": 7,
          "line": 1
        },
        "start": {
          "character": 4,
          "line": 1
        }
      }
    }
  }
]
